variables:
    STAGE_API_URL_target: "https://git.myg.vn/api/v4/projects/46/repository/archive?path=target&sha=stage"
    FEATURE_API_URL_target: "https://git.myg.vn/api/v4/projects/46/repository/archive?path=target&sha=$CI_COMMIT_REF_NAME"

    
    STAGE_API_URL_hibernate: "https://git.myg.vn/api/v4/projects/46/repository/files/hibernate.cfg.xml/raw?ref=stage"
    FEATURE_API_URL_hibernate: "https://git.myg.vn/api/v4/projects/46/repository/files/hibernate.cfg.xml/raw?ref=$CI_COMMIT_REF_NAME"
    
    STAGE_API_URL_config: "https://git.myg.vn/api/v4/projects/46/repository/files/config.xml/raw?ref=stage"
    FEATURE_API_URL_config: "https://git.myg.vn/api/v4/projects/46/repository/files/config.xml/raw?ref=$CI_COMMIT_REF_NAME"
    
    STAGE_API_URL_KeywordChatBlock: "https://git.myg.vn/api/v4/projects/46/repository/files/src%2Fmain%2Fresources%2FKeywordChatBlock.txt/raw?ref=stage"
    FEATURE_API_URL_KeywordChatBlock: "https://git.myg.vn/api/v4/projects/46/repository/files/src%2Fmain%2Fresources%2FKeywordChatBlock.txt/raw?ref=$CI_COMMIT_REF_NAME"

    BASE: "/home"
    STAGE: "/home/game-server"
    CLONE: "/home/gitlab-runner/clone"

    BACKUP: "/home/gitlab-runner/game-server-backups"
    COMMIT: "$CI_COMMIT_SHA"

    JedisCache: "$STAGE/target/classes/com/bem/jedis/JedisCache*"
    OviStore: "$STAGE/target/classes/com/bem/ovi/OviStore*"
    ApiServer: "$STAGE/target/classes/com/bem/util/ApiServer*"
    Xerver: "$STAGE/target/classes/com/k2tek/Xerver*"
    WebSocketSslServer: "$STAGE/target/classes/com/k2tek/net/websocket/WebSocketSslServer.class"
    WebSocketSslServerPipelineFactory: "$STAGE/target/classes/com/k2tek/net/websocket/WebSocketSslServerPipelineFactory*"

stages:
    - build&deploy_STAGE
    - build&deploy_FEATURE
    - rollback_DEV
    - rollback_PRODUCT
    - checklog

build&deploy_STAGE:
    stage: build&deploy_STAGE
    variables:
        GIT_STRATEGY: none
    script:
        - |
            STATUS_CODE=$(curl -o /dev/null -s -w "%{http_code}" --header "PRIVATE-TOKEN: $TOKEN" $STAGE_API_URL_target)
            if [ "$STATUS_CODE" -ne 200 ]; then
                echo "Folder 'target' kh√¥ng t·ªìn t·∫°i tr√™n GitLab. D·ª´ng tri·ªÉn khai."
                exit 0
            fi

            if [ ! -d "$CLONE" ]; then mkdir -p "$CLONE"; fi
            cd $CLONE && rm -rf *
            curl --output build.tar.xz --header "PRIVATE-TOKEN: $TOKEN" $STAGE_API_URL_target
            tar -xf build.tar.xz -C .
            curl --output hibernate.cfg.xml --header "PRIVATE-TOKEN: $TOKEN" $STAGE_API_URL_hibernate
            curl --output config.xml --header "PRIVATE-TOKEN: $TOKEN" $STAGE_API_URL_config
            curl --output KeywordChatBlock.txt --header "PRIVATE-TOKEN: $TOKEN" $STAGE_API_URL_KeywordChatBlock
            
            cd $STAGE
            bash stop-gitlab.sh
            rm -rf target hibernate.cfg.xml config.xml src/main/resources/KeywordChatBlock.txt
            mv $CLONE/gameserver-*/target $CLONE/hibernate.cfg.xml $CLONE/config.xml $STAGE
            rm -rf $CLONE/gameserver-*
            mv $CLONE/KeywordChatBlock.txt $STAGE/src/main/resources
            bash run-gitlab.sh
            chown -R develop:develop $STAGE

            cd $BASE
            if [ ! -d "$BACKUP" ]; then mkdir -p "$BACKUP"; fi
            zip -rq game-server-$COMMIT.zip game-server -x "game-server/logs/*" "game-server/logs" "game-server/image/*" "game-server/image"
            mv game-server-$COMMIT.zip $BACKUP
            ls -1t $BACKUP | tail -n +3 | xargs -I {} rm -f "$BACKUP/{}"

            # Li·ªát k√™ c√°c backup theo commit hash
            #echo "C√°c b·∫£n backup kh·∫£ d·ª•ng (theo commit hash):"
            #ls -1t $BACKUP
    tags:
        - wewin-server-dev
    only:
        - stage

build&deploy_FEATURE:
    stage: build&deploy_FEATURE
    variables:
        GIT_STRATEGY: none
    when: manual
    script:
        - |
            STATUS_CODE=$(curl -o /dev/null -s -w "%{http_code}" --header "PRIVATE-TOKEN: $TOKEN" $FEATURE_API_URL_target)
            if [ "$STATUS_CODE" -ne 200 ]; then
                echo "Folder 'target' kh√¥ng t·ªìn t·∫°i tr√™n GitLab. D·ª´ng tri·ªÉn khai."
                exit 0
            fi

            if [ ! -d "$CLONE" ]; then mkdir -p "$CLONE"; fi
            cd $CLONE && rm -rf *
            curl --output build.tar.xz --header "PRIVATE-TOKEN: $TOKEN" $FEATURE_API_URL_target
            tar -xf build.tar.xz -C .


            # Ki·ªÉm tra file hibernate.cfg.xml t·ªìn t·∫°i tr√™n nh√°nh
            STATUS_CODE_2=$(curl -o /dev/null -s -w "%{http_code}" --header "PRIVATE-TOKEN: $TOKEN" $FEATURE_API_URL_hibernate)
            if [ "$STATUS_CODE_2" -ne 200 ]; then
                echo "‚ö†Ô∏è  hibernate.cfg.xml kh√¥ng t·ªìn t·∫°i tr√™n nh√°nh $CI_COMMIT_REF_NAME. B·ªè qua b∆∞·ªõc t·∫£i v·ªÅ."
            else
                echo "‚úÖ File hibernate.cfg.xml t·ªìn t·∫°i. Ti·∫øn h√†nh ki·ªÉm tra s·ª± thay ƒë·ªïi."
                echo "üîÑ X√°c ƒë·ªãnh commit tr∆∞·ªõc ƒë√≥ tr√™n nh√°nh $CI_COMMIT_REF_NAME..."
                
                # Ki·ªÉm tra n·∫øu ƒë√¢y l√† commit ƒë·∫ßu ti√™n (kh√¥ng c√≥ commit tr∆∞·ªõc ƒë√≥)
                if [ "$CI_COMMIT_BEFORE_SHA" = "0000000000000000000000000000000000000000" ]; then
                    echo "üÜï ƒê√¢y l√† commit ƒë·∫ßu ti√™n tr√™n nh√°nh, t·ª± ƒë·ªông t·∫£i file hibernate.cfg.xml"
                    curl --output hibernate.cfg.xml --header "PRIVATE-TOKEN: $TOKEN" $FEATURE_API_URL_hibernate
                else
                    
                    # L·∫•y commit tr∆∞·ªõc ƒë√≥ m·ªôt c√°ch ch√≠nh x√°c tr√™n c√πng 1 nh√°nh t·ª´ GitLab API
                    PREV_COMMIT=$(curl -s --header "PRIVATE-TOKEN: $TOKEN" "https://git.myg.vn/api/v4/projects/46/repository/commits?ref_name=$CI_COMMIT_REF_NAME&per_page=2" | jq -r '.[1].id')
                    echo "üìå Commit tr∆∞·ªõc ƒë√≥ tr√™n nh√°nh $CI_COMMIT_REF_NAME: $PREV_COMMIT"
                    
                    # L·∫•y danh s√°ch file thay ƒë·ªïi gi·ªØa commit tr∆∞·ªõc v√† commit hi·ªán t·∫°i
                    FILE_CHANGED=$(curl -s --header "PRIVATE-TOKEN: $TOKEN" "https://git.myg.vn/api/v4/projects/46/repository/compare?from=$PREV_COMMIT&to=$CI_COMMIT_SHA" | jq -r '.diffs[]?.new_path' | grep "hibernate.cfg.xml" || true)

                    # Ki·ªÉm tra xem file c√≥ thay ƒë·ªïi kh√¥ng
                    if [ -z "$FILE_CHANGED" ]; then
                        echo "‚è© N·ªôi dung file hibernate.cfg.xml kh√¥ng thay ƒë·ªïi. B·ªè qua t·∫£i v·ªÅ."
                    else
                        echo "üöÄ N·ªôi dung file hibernate.cfg.xml ƒë√£ thay ƒë·ªïi. Ti·∫øn h√†nh t·∫£i v·ªÅ."
                        curl --output hibernate.cfg.xml --header "PRIVATE-TOKEN: $TOKEN" $FEATURE_API_URL_hibernate
                    fi
                fi
            fi



            curl --output hibernate.cfg.xml --header "PRIVATE-TOKEN: $TOKEN" $FEATURE_API_URL_hibernate
            curl --output config.xml --header "PRIVATE-TOKEN: $TOKEN" $FEATURE_API_URL_config
            curl --output KeywordChatBlock.txt --header "PRIVATE-TOKEN: $TOKEN" $FEATURE_API_URL_KeywordChatBlock
            
            rm gameserver-*/target/classes/com/bem/jedis/JedisCache*
            rm gameserver-*/target/classes/com/bem/ovi/OviStore*
            rm gameserver-*/target/classes/com/bem/util/ApiServer*
            rm gameserver-*/target/classes/com/k2tek/Xerver*
            rm gameserver-*/target/classes/com/k2tek/net/websocket/WebSocketSslServer.class
            rm gameserver-*/target/classes/com/k2tek/net/websocket/WebSocketSslServerPipelineFactory*
            cp $JedisCache gameserver-*/target/classes/com/bem/jedis/
            cp $OviStore gameserver-*/target/classes/com/bem/ovi/
            cp $ApiServer gameserver-*/target/classes/com/bem/util/
            cp $Xerver gameserver-*/target/classes/com/k2tek/
            cp $WebSocketSslServer gameserver-*/target/classes/com/k2tek/net/websocket/
            cp $WebSocketSslServerPipelineFactory gameserver-*/target/classes/com/k2tek/net/websocket/
            
            cd $STAGE
            bash stop-gitlab.sh
            rm -rf target config.xml src/main/resources/KeywordChatBlock.txt
            mv $CLONE/gameserver-*/target $CLONE/config.xml $STAGE
            if [ ! -d "$CLONE/hibernate.cfg.xml" ]; then rm hibernate.cfg.xml && mv $CLONE/hibernate.cfg.xml $STAGE; fi
            rm -rf $CLONE/gameserver-*
            mv $CLONE/KeywordChatBlock.txt $STAGE/src/main/resources
            bash run-gitlab.sh
            chown -R develop:develop $STAGE

            cd $BASE
            if [ ! -d "$BACKUP" ]; then mkdir -p "$BACKUP"; fi
            zip -rq game-server-$COMMIT.zip game-server -x "game-server/logs/*" "game-server/logs" "game-server/image/*" "game-server/image"
            mv game-server-$COMMIT.zip $BACKUP
            ls -1t $BACKUP | tail -n +3 | xargs -I {} rm -f "$BACKUP/{}"

            # Li·ªát k√™ c√°c backup theo commit hash
            #echo "C√°c b·∫£n backup kh·∫£ d·ª•ng (theo commit hash):"
            #ls -1t $BACKUP
    tags:
        - wewin-server-dev
    only:
        - /^feature\/.*/

rollback_DEV:
    stage: rollback_DEV
    variables:
        GIT_STRATEGY: none
    when: manual
    script:
        - |      
            # Ki·ªÉm tra file backup t·ªìn t·∫°i
            if [ ! -f "$BACKUP/game-server-$COMMIT.zip" ]; then
                echo "File backup kh√¥ng t·ªìn t·∫°i tr√™n server. H·ªßy rollback."
                exit 1
            fi
            
            # D·ª´ng server
            cd $STAGE && bash stop-gitlab.sh
            
            # X√≥a d·ªØ li·ªáu c≈©
            if [ -d "$STAGE" ]; then 
                find "$STAGE" -mindepth 1 -path "$STAGE/image" -prune -o -path "$STAGE/logs" -prune -o -exec rm -rf {} +; 
            fi
            
            # Gi·∫£i n√©n backup
            echo "Rollback v·ªÅ b·∫£n $BACKUP/game-server-$COMMIT.zip"
            unzip -q "$BACKUP/game-server-$COMMIT.zip" -d $BASE
            
            # Ch·∫°y l·∫°i server
            cd $STAGE && bash run-gitlab.sh
            chown -R develop:develop $STAGE
            echo "Rollback th√†nh c√¥ng!"
    tags:
        - wewin-server-dev
    only:
        - stage
        - /^feature\/.*/
checklog:
    stage: checklog
    variables:
        GIT_STRATEGY: none
    when: manual
    script:
        - cd $STAGE
        - timeout 10 tail -n 1000 -f $STAGE/logs/log.txt || true
        - echo "$(tail -1500 $STAGE/logs/log.txt)" > $STAGE/logs/log.txt
    tags:
        - wewin-server-dev
    only:
        - stage
        - /^feature\/.*/
